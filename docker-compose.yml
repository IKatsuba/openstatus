version: "3"

services:
  db:
    image: ghcr.io/tursodatabase/libsql-server:latest
    platform: linux/amd64
    ports:
      - "8080:8080"
      - "5001:5001"
    volumes:
      - db_data:/var/lib/sqld
  redis:
    image: redis/redis-stack:edge
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
  serverless-redis:
    ports:
      - '8079:3000'
    image: ghcr.io/ikatsuba/serverless-redis
    environment:
      SR_TOKEN: test
      REDIS_URL: 'redis://redis:6379'
    depends_on:
      - redis
  ngrok:
    image: ngrok/ngrok:latest
    command: 'http localhost:8081'
    env_file:
      - .env
    network_mode: host
  s3:
    image: minio/minio
    entrypoint: sh -c "minio server /data --console-address ':9001'"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
      MINIO_DOMAIN: localhost
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio_data:/data
  create-bucket-and-user:
    image: minio/mc
    entrypoint: sh -c "mc config host add minio http://s3:9000 minio minio123 && mc mb minio/incident-screenshot && mc anonymous set public minio/nx-cloud"
    depends_on:
      - s3
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
  screenshot-service:
    build:
      context: .
      dockerfile: ./apps/screenshot-service/Dockerfile
    ports:
      - '8081:8081'
    env_file:
      - apps/screenshot-service/.env
    depends_on:
      - db
      - s3
      - create-bucket-and-user
      - ngrok
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    ports:
      - '3000:3000'
    env_file:
      - apps/web/.env
    depends_on:
      - db
  tinybird_push:
    build:
      context: .
      dockerfile: ./packages/tinybird/Dockerfile
    env_file:
      - packages/tinybird/.env


volumes:
  db_data:
  redis_data:
  minio_data:
